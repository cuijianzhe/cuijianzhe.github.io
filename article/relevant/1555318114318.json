{"relevantArticles":[{"articleTitle":"多线程之倒计时计数器 CountDownLatch","articleAbstractText":"上篇回顾：多线程回环栅栏 CyclicBarrier 使用场景 假设有一个列表，多选之后，点击压缩。此时后台肯定是多线程跑压缩任务，那我们就可以使用CountDownLatch来在全部压缩完成之后处理一些事情。 示例代码 public class testMain { public static void main(String[] args) { // 初始化计数 AtomicInteger count = new AtomicInteger(0); // 创建 10 个线程 ExecutorService es = Executors.newFixedThreadPool(10); // 设置 CountDownLatch 为 10 CountDownLatch countDownLatch = new CountDownLatch(10); for (int i = 0; i &lt; 10; i++) { es.execute(() -&gt; { // 每个线程累计增加 1000 次 for (int j = 0; j &lt; 1000; j++) { count.addA....","articleStatus":0,"articlePermalink":"/articles/2019/04/15/1555309259187.html","articleImg1URL":"https://img.hacpai.com/bing/20171216.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"多线程之同步屏障CyclicBarrier的使用","articleAbstractText":"工欲善其事，必先利其器，要想搞懂多线程，首先要把jdk自带的多线程工具搞懂","articleStatus":0,"articlePermalink":"/articles/2019/04/10/1554887221480.html","articleImg1URL":"https://img.hacpai.com/bing/20180705.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}