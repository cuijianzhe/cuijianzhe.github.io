{"relevantArticles":[{"articleTitle":"RabbitMQ","articleAbstractText":"RabbitMQ 是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。它的并发最高可以支持一万并发，且它出身于金融行业。 RabbitMQ核心概念 Producer：生产者 Consumer：消费者 Broker：消息中间件的服务节点 。 Virtual Host：等同于namespace Channel：频道或信道，是建立在Connection连接之上的一种轻量级的连接。 RoutingKey：路由键。生产者将消息发给交换器的时候，一般会指定一个 RoutingKey，用来指定这个消息的路由规则。 Exchange：交换器，生产者将消息发送到 Exchange (交换器，通常也可以用大写的\u201cX\u201d来表示)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或返回给生产者，或直接丢弃。 Queue：队列，是RabbitMQ的内部对象，用于存储消息。 Binding：绑定，RabbitMQ 中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键( BindingKey ) ，这样....","articleStatus":0,"articlePermalink":"/articles/2022/04/12/1649754076067.html","articleImg1URL":"https://b3logfile.com/bing/20191115.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"模糊查询输入%和_会查询全部的问题","articleAbstractText":"相信每个人都写过这样的的mybatis的sql代码： SELECT * FROM user WHERE NAME LIKE concat('%', concat( '小', '%' )) 查询结果如下: 那么如果将'小'换成%呢？ 再换成''呢？ 没错，它会查询出所有数据，说来惭愧，这也是我一个5年java开发程序员才注意到的事情！！！GOD 问题出现了就要解决它，有大佬推荐说mysql可以使用ngram进行分词，我不知道是啥也没用过，而且我用的数据库是oracle 不过我找到了另外一种既可以在oracle用的也可以在mysql用的解决办法： 首先我们在代码中进行字符串替换： String name = user.getUserName(); if(null!=name &amp;&amp; !\"\".equals(name)){ user.setName(name.replaceAll(\"\\%\",\"\\\\%\").replaceAll(\"\\\",\"\\\\_\")); } 然后修改查询sql: 为什么图中用的@？因为mysql用\\会报错，只能用两个斜杠\\ \\ ,但是在oracle中....","articleStatus":0,"articlePermalink":"/articles/2022/04/01/1648780777601.html","articleImg1URL":"https://b3logfile.com/bing/20211020.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"java线上故障排查方案","articleAbstractText":"Java常见线上问题总结 绝⼤多数Java线上问题从表象来看通常可以归纳为4个方面：CPU、内存、磁盘、网络。比如，应用上线 后突然CPU使用率99%、内存泄漏、STW时间过长，这些问题通常可以分为两大类： 系统异常 （CPU占用率过高、磁盘使用率100%、系统可用内存低等） 业务异常 （服务运⾏⼀段时间⾃动退出、服务间调⽤时间过⻓、多线程并发异常、死锁等） 1.如何去定位问题 解决问题的第⼀步是定位问题，排查手段⼀般包括以下⼏项，也可以将此理解为排查顺序： 业务⽇志分析排查 APM分析排查 物理环境排查 应⽤服务排查 云⼚商或运营商问题排查 1.1 业务⽇志分析排查 这个没啥说的，看日志不会吗？ 1.2 APM分析排查 APM，全称Application Performance Management,应⽤性能管理 在分布式系统中，需要用到APM进行全链路分析 ⽬前市场上使⽤较多的链路跟踪⼯具有如下⼏个： Apache Skywalking：https://skywalking.apache.org Pinpoint：https://pinpoint.com/product/for-e....","articleStatus":0,"articlePermalink":"/articles/2022/03/31/1648720724120.html","articleImg1URL":"https://b3logfile.com/bing/20210204.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"分析linux的java进程的dump文件","articleAbstractText":"#先参考我之前的一篇文章在服务器进行一个死锁的情景重现# 检测死锁的文章 查看java进程 ps -ef|grep java 针对进程id生成dump文件 jmap -dump:format=b,file=serviceDump.dat 14640 使用jvisualvm.exe对dump进行分析（如果jdk的bin目录下没有，需要自行下载） https://visualvm.github.io/index.html 修改visualvm.conf 加入JDK 路径 visualvm_jdkhome=\"C:/Users/JavaCoder/.jdks/corretto-1.8.0_312\" 双击bin目录下的visualvm.exe打开 导入dump文件后查看死锁的线程 还有另外一种使用方式 jhat : jhat 用于分析 heapdump 文件，它会建立一个 HTTP/HTML 服务器，让用户可以在浏览器上查看分析结果 C:\\Users\\SnailClimb&gt;jhat C:\\Users\\SnailClimb\\Desktop\\heap.hprof Reading from C:....","articleStatus":0,"articlePermalink":"/articles/2022/03/15/1647327044536.html","articleImg1URL":"https://b3logfile.com/bing/20210914.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"}]}