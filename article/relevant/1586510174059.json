{"relevantArticles":[{"articleTitle":"面试官：用过Linux吗？","articleAbstractText":"在Linux操作系统中，所有被操作系统管理的资源，例如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或是目录都被看作是一个文件。也就是说在LINUX系统中有一个重要的概念：一切都是文件。其实这是UNIX哲学的一个体现，而Linux是重写UNIX而来，所以这个概念也就传承了下来。在UNIX系统中，把一切资源都看作是文件，包括硬件设备。UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以用读写文件的方式实现对硬件的访问。 Linux目录树 所有可操作的计算机资源都存在于目录树这个结构中，对计算资源的访问，可以看做是对这棵目录树的访问 Linux文件系统的结构层次鲜明，就像一棵倒立的树，最顶层是其根目录： 常见目录说明： /bin： 存放二进制可执行文件(ls、cat、mkdir等)，常用命令一般都在这里； /etc： 存放系统管理和配置文件； /home： 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示； /usr ： 用于存放系统应用程序； /opt： 额外安装的可选应用程序包所放置的位置。....","articleStatus":0,"articlePermalink":"/articles/2022/03/31/1648709836067.html","articleImg1URL":"https://b3logfile.com/bing/20210224.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"zabbix agent 隔离网络ICMP监控实现","articleAbstractText":"寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风","articleStatus":0,"articlePermalink":"/articles/2023/11/19/1700395999304.html","articleImg1URL":"https://b3logfile.com/bing/20171104.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"confluence自启动","articleAbstractText":"[root@system-wiki ~]# cat /usr/lib/systemd/system/wiki.service [Unit] Description=Wiki [Service] Type=simple PIDFile=/usr/local/atlassian/confluence/work/catalina.pid ExecStartPre=rm -rf /usr/local/atlassian/confluence/work/catalina.pid ExecStart=/usr/local/atlassian/confluence/bin/startup.sh ExecStop=/usr/local/atlassian/confluence/bin/shutdown.sh PrivateTmp=true Restart=always User=confluence Group=confluence [Install] WantedBy=multi-user.target pid设置文件：/usr/local/atlassian/confluence/bin/s.......","articleStatus":0,"articlePermalink":"/articles/2022/01/21/1642779793133.html","articleImg1URL":"https://b3logfile.com/bing/20190316.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"centos查看编译参数","articleAbstractText":"查看nginx编译参数：/usr/local/nginx/sbin/nginx -V 查看apache编译参数：cat /usr/local/apache2/build/config.nice 查看mysql编译参数：cat /usr/local/mysql/bin/mysqlbug | grep CONFIGURE_LINE 查看php编译参数：/usr/local/php/bin/php -i | grep configure","articleStatus":0,"articlePermalink":"/articles/2021/11/18/1637231574043.html","articleImg1URL":"https://b3logfile.com/bing/20220429.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"KUbernets实践之pod控制器","articleAbstractText":"为什么用pod控制器？ 只使用Pod, 将会面临如下需求: 业务应用启动多个副本 Pod重建后IP会变化，外部如何访问Pod服务 运行业务Pod的某个节点挂了，可以自动帮我把Pod转移到集群中的可用节点启动起来 我的业务应用功能是收集节点监控数据,需要把Pod运行在k8集群的各个节点上 Workload (工作负载) 控制器又称工作负载是用于实现管理pod的中间层，确保pod资源符合预期的状态，pod的资源出现故障时，会尝试 进行重启，当根据重启策略无效，则会重新新建pod的资源。 ReplicaSet: 代用户创建指定数量的pod副本数量，确保pod副本数量符合预期状态，并且支持滚动式自动扩容和缩容功能 Deployment：工作在ReplicaSet之上，用于管理无状态应用，目前来说最好的控制器。支持滚动更新和回滚功能，还提供声明式配置 DaemonSet：用于确保集群中的每一个节点只运行特定的pod副本，通常用于实现系统级后台任务。比如ELK服务 Job：只要完成就立即退出，不需要重启或重建 Cronjob：周期性任务控制，不需要持续后台运行 StatefulSet：管理有状态应....","articleStatus":0,"articlePermalink":"/articles/2020/04/22/1587528230774.html","articleImg1URL":"https://b3logfile.com/file/2020/04/workload-6ee9309c.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}