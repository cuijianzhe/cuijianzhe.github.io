{"relevantArticles":[{"articleTitle":"Kubernetes服务访问","articleAbstractText":"通过Deployment来创建一组Pod来提供具有高可用性的服务。虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两个问题： Pod IP仅仅是集群内可见的虚拟IP，外部无法访问。 Pod IP会随着Pod的销毁而消失，当ReplicaSet对Pod进行动态伸缩时，Pod IP可能随时随地都会变化，这样对于我们访问这个服务带来了难度。 Service 负载均衡之Cluster IP service是一组pod的服务抽象，相当于一组pod的LB，负责将请求分发给对应的pod。service会为这个LB提供一个IP，一般称为cluster IP 。使用Service对象，通过selector进行标签选择，找到对应的Pod: 示例： [root@k8s-master deployment]# cat svc-myblog.yaml apiVersion: v1 kind: Service metadata: name: myblog namespace: demo spec: ports: - port: 80 protocol: TCP targetPort: 8....","articleStatus":0,"articlePermalink":"/articles/2020/04/23/1587624487440.html","articleImg1URL":"https://file.cjzshilong.cn/pictures_file/services-iptables-overview.svg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"linux服务器与H3C交换机聚合口对接","articleAbstractText":"交换机与Linux服务器多网卡bond模式对接 交换机多端口和服务器对接时，需要确定是否需要配置聚合或者不配置聚合，并且配置聚合的时候还需要确认是静态聚合还是动态聚合，当然这和当前服务器网卡的bond模式有关。下面我们了解下Linux服务器的7种bond模式，说明如下： 第一种模式：mod=0 ，即：(balance-rr) Round-robin policy（平衡抡循环策略） 特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1\u2026.一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降。这种模式需要接入交换机配置静态链路聚合配置。 V5/V7交换机侧的静态典型配置 [DeviceA] interface Bridge-Aggregation 1 //默认静态 [DeviceA-Bridge-Aggregation1] quit [DeviceA] inter....","articleStatus":0,"articlePermalink":"/articles/2022/06/22/1655900167936.html","articleImg1URL":"https://b3logfile.com/bing/20221022.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"面试官：用过Linux吗？","articleAbstractText":"在Linux操作系统中，所有被操作系统管理的资源，例如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或是目录都被看作是一个文件。也就是说在LINUX系统中有一个重要的概念：一切都是文件。其实这是UNIX哲学的一个体现，而Linux是重写UNIX而来，所以这个概念也就传承了下来。在UNIX系统中，把一切资源都看作是文件，包括硬件设备。UNIX系统把每个硬件都看成是一个文件，通常称为设备文件，这样用户就可以用读写文件的方式实现对硬件的访问。 Linux目录树 所有可操作的计算机资源都存在于目录树这个结构中，对计算资源的访问，可以看做是对这棵目录树的访问 Linux文件系统的结构层次鲜明，就像一棵倒立的树，最顶层是其根目录： 常见目录说明： /bin： 存放二进制可执行文件(ls、cat、mkdir等)，常用命令一般都在这里； /etc： 存放系统管理和配置文件； /home： 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示； /usr ： 用于存放系统应用程序； /opt： 额外安装的可选应用程序包所放置的位置。....","articleStatus":0,"articlePermalink":"/articles/2022/03/31/1648709836067.html","articleImg1URL":"https://b3logfile.com/bing/20210224.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"关于 Kubernetes 的这些原理，你一定要了解","articleAbstractText":"kubernetes 已经成为容器编排领域的王者，它是基于容器的集群编排引擎，具备扩展集群、滚动升级回滚、弹性伸缩、自动治愈、服务发现等多种特性能力。 本文将带着大家快速了解 kubernetes ，了解我们谈论 kubernetes 都是在谈论什么。 kubernetes 架构 从宏观上来看 kubernetes 的整体架构，包括 Master、Node 以及 Etcd。 Master 即主节点，负责控制整个 kubernetes 集群。它包括 Api Server、Scheduler、Controller 等组成部分。它们都需要和 Etcd 进行交互以存储数据。 Api Server：主要提供资源操作的统一入口，这样就屏蔽了与 Etcd 的直接交互。功能包括安全、注册与发现等。 Scheduler：负责按照一定的调度规则将 Pod 调度到 Node 上。 Controller：资源控制中心，确保资源处于预期的工作状态。 Node 即工作节点，为整个集群提供计算力，是容器真正运行的地方，包括运行容器、kubelet、kube-proxy。 kubelet：主要工作包括管理容器的生命周....","articleStatus":0,"articlePermalink":"/articles/2020/08/15/1597459617030.html","articleImg1URL":"https://file.cjzshilong.cn/pictures_file/kubernetes-area.png?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"confluence自启动","articleAbstractText":"[root@system-wiki ~]# cat /usr/lib/systemd/system/wiki.service [Unit] Description=Wiki [Service] Type=simple PIDFile=/usr/local/atlassian/confluence/work/catalina.pid ExecStartPre=rm -rf /usr/local/atlassian/confluence/work/catalina.pid ExecStart=/usr/local/atlassian/confluence/bin/startup.sh ExecStop=/usr/local/atlassian/confluence/bin/shutdown.sh PrivateTmp=true Restart=always User=confluence Group=confluence [Install] WantedBy=multi-user.target pid设置文件：/usr/local/atlassian/confluence/bin/s.......","articleStatus":0,"articlePermalink":"/articles/2022/01/21/1642779793133.html","articleImg1URL":"https://b3logfile.com/bing/20190316.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}