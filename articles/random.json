{"randomArticles":[{"articleTitle":"Python之@函数装饰器","articleAbstractText":"@函数装饰器 装饰器的作用 \u2014\u2014 不想修改函数的调用方式 但是还想在原来的函数前后添加功能 原则： 开放封闭原则 开放 ： 对扩展是开放的 封闭 ： 对修改是封闭的 示例 当程序使用\u201c@函数\u201d（比如函数 A ）装饰另一个函数（比如函数 B ）时， 实际上完成如下两 步。  将被修饰的函数（函数 B ）作为参数传给＠符号引用的函数（函数 A ）。 将函数 B 替换（装饰）成第 ① 步的返回值。 从上面介绍不难看出，被\u201c＠函数\u201d修饰的函数不再是原来的函数，而是被替换成一个新的东西。  看一下实例： def funA(fn): print('A') fn() return 'asdf' ''' 下面的装饰效果相当于funA(funB) funB 将会被替换（装饰）成该语句的返回值 由于funA 函数返回fkit ，因此funB 就是asdf ''' @funA def funB(): print('B') print(funB)  上面程序使用＠funA 修饰 funB ，这意味着程序要完成两步操作。 ① 将 funB 作为 funA()的参数，也就是上面的粗体字代码相当于执行 funA(f....","articleStatus":0,"articlePermalink":"/articles/2019/11/21/1574322166949.html","articleImg1URL":"https://img.hacpai.com/bing/20180507.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"利用爬虫爬取我的solo博客","articleAbstractText":"在看到你第一眼的时候 上帝在我耳边说了四个字 在劫难逃","articleStatus":0,"articlePermalink":"/articles/2020/03/25/1585126708916.html","articleImg1URL":"https://img.hacpai.com/file/2019/09/IMG20190831074102-95e6d9f7.jpg?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}